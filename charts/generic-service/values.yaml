image:
  # -- Docker image registry
  registry:
  # -- Docker repository
  repository: generic-service
  # -- Docker image tag
  tag: 0.0.1
  # -- Image pull policy
  pullPolicy: IfNotPresent
  # -- Docker registry secret names as an array
  pullSecrets: []

service:
  # -- Type of the kubernetes service
  type: ClusterIP
  # -- Port that will be exposed on the service
  port: 80
  # -- TargetPort of your docker image
  targetPort: 8080
  # -- Annotations added to the service resources
  annotations: {}
  # -- Labels added to the service resources
  labels: {}

deployment:
  # -- Labels added to the deployment resources
  labels: {}
  # -- Annotations added to the deployment resources
  annotations: {}
  # -- Deployment strategy
  strategy:

configmap:
  # -- Annotations added to the configmap resource
  annotations: {}
  # -- Labels added to the configmap resource
  labels: {}
  # -- Define data that will be into the configmap resource
  data: {}

ingress:
  # -- Create or not ingress resource
  enabled: true
  # -- Hostname of the ingress resource
  hostname: generic-service.localhost
  # -- Path defined into the ingress resource
  path: /
  # -- PathType defined into the ingress resource
  pathType: ImplementationSpecific
  # -- Labels added to the ingress resource
  labels: {}
  # -- Annotations added to the ingress resources
  annotations:
    kubernetes.io/ingress.class: "nginx"
  # -- Activate or not the tls part of the ingress resource
  tls: true
  # -- Specify an existing tls secret
  tlsSecretName: null
  # -- TLS configuration for additional hostname(s) to be covered with this ingress resource
  extraTls: []
  # -- An array with additional hostname(s) to be covered with the ingress resource
  extraHosts: []
  # -- An array with additional arbitrary paths that may need to be added to the ingress under the main host
  extraPaths: []

hpa:
  # -- Whether enable horizontal pod autoscaler
  enabled: false
  # -- Configure a minimum amount of pods
  minReplicas: 1
  # -- Configure a maximum amount of pods
  maxReplicas: 5
  cpu:
    # -- Define the CPU target to trigger the scaling actions (utilization percentage)
    averageUtilization: 80
  memory:
    # -- Define the memory target to trigger the scaling actions (utilization percentage)
    averageUtilization: 100
  # -- Labels added to the horizontal pod autoscaler resource
  labels: {}
  # -- Annotation added to the horizontal pod autoscaler resource
  annotations: {}

# -- The name of the ServiceAccount to use (have to already exists)
serviceAccountName:

# -- Number of desired pods, only applicable if hpa.enabled is false
replicaCount: 1 # Overrided if hpa is enabled

# -- Node labels for pod assignment
nodeSelector: {}

# -- Affinity for pod assignment
affinity: {}

# -- Tolerations for pods assignment
tolerations: []

# -- Use an alternate scheduler
schedulerName: null

# -- Priority Class Name
priorityClassName: null

securityContext:
  enabled: false
  runAsUser:
  runAsGroup:
  fsGroup:

# -- Topology Spread Constraints for pod assignment spread across your cluster
topologySpreadConstraints: {}

# -- Add additional init containers
initContainers: []

# -- Optionally specify extra list of additional volumeMounts
extraVolumeMounts: []

# -- Optionally specify extra list of additional volumes
extraVolumes: []

# -- Add additional sidecar containers
sidecars: []

# -- Pods host aliases
hostAliases: []

# -- Override default container command
command: []

# -- Override default container args
args: []

# --  Array with extra environment variables to add in pods
extraEnvVars: []

# -- Optionally specify existing configMap which will be added to our pods
extraEnvVarsConfigMap: ""

# -- Optionally specify existing secret which will be added to our pods
extraEnvVarsSecret: ""

# -- Add extra annotations to the pods
podAnnotations: {}

# -- Add extra labels to the pods
podLabels: {}

livenessProbe:
  # -- Enable livenessProbe on containers
  enabled: false
  # -- Path for livenessProbe
  path: /health
  # -- Port for livenessProbe
  port: null
  # -- Initial delay seconds for livenessProbe
  initialDelaySeconds: 300
  # -- Timeout seconds for livenessProbe
  timeoutSeconds: 3
  # -- Period seconds for livenessProbe
  periodSeconds: 10
  # -- Failure threshold for livenessProbe
  failureThreshold: 5
  # -- Success threshold for livenessProbe
  successThreshold: 1

readinessProbe:
  # -- Enable readinessProbe on containers
  enabled: false
  # -- Path for readinessProbe
  path: /health
  # -- Port for readinessProbe
  port: null
  # -- Initial delay seconds for readinessProbe
  initialDelaySeconds: 300
  # -- Timeout seconds for readinessProbe
  timeoutSeconds: 2
  # -- Period seconds for readinessProbe
  periodSeconds: 5
  # -- Failure threshold for readinessProbe
  failureThreshold: 5
  # -- Success threshold for readinessProbe
  successThreshold: 1

startupProbe:
  # -- Enable startupProbe on containers
  enabled: false
  # -- Path for startupProbe
  path: /health
  # -- Port for startupProbe
  port: null
  # -- Initial delay seconds for startupProbe
  initialDelaySeconds: 300
  # -- Timeout seconds for startupProbe
  timeoutSeconds: 2
  # -- Period seconds for startupProbe
  periodSeconds: 5
  # -- Failure threshold for startupProbe
  failureThreshold: 5
  # -- Success threshold for startupProbe
  successThreshold: 1

resources:
  requests:
    # -- The cpu resources requests for the containers
    cpu: 100m
    # -- The memory resources requests for the containers
    memory: 128Mi
  limits:
    # -- The cpu resources limits for the containers
    cpu: 200m
    # -- The memory resources limits for the containers
    memory: 256Mi
